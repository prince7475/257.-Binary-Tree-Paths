Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3

/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {string[]}
 */
var binaryTreePaths = function(root) {
   if(root === null) return []
   let allPaths = []
   if(root.left){
      treePathHelper(root.left,[root.val], allPaths)
   }
   if(root.right){
      treePathHelper(root.right,[root.val], allPaths)
   }
   
   let result = allPaths.map((arr) => return arr.join('->'))
   return result
};

function treePathHelper(node,currArr, allPath){
   if(node === null) {
      allPath.push(currArr)
      return allPath
   }
      currArr.push(node.val)
      rightArr = currArr.concat()
      treePathHelper(node.right, rightArr, allPath)
  
      let leftArr = currArr.concat()
      treePathHelper(node.right, leftArr, allPath)
      
      return allPath
}



