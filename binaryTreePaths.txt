Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3

/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {string[]}
 */
var binaryTreePaths = function(root) {
   if(root === null) return []
   let allPaths = []
   treePathHelper(root, "", allPaths)
   
   return allPaths
};

function treePathHelper(node, currPath, allPaths){
   if(node === null){
      allPaths.push(currPath)
      return allPaths
   }
   
   currPath + node.val
   if(node.left){
      treePathHelper(node.left, currPath + '->', allPaths)
   }
   
   if(node.right){
      treePathHelper(node.right, currPath + '->', allPaths)
   }
   

   return allPaths
}



